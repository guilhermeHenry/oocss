// _   _   _
//|_| |_| |_|
//	   _
// 1ยบ |_| nome da cor
// 2ยบ |_| repete o Nome da cor
// 3ยบ |_| (1-9)
$colorNames: (aliceblue, antiquewhite, aqua, aquamarine, azure, beige, bisque, black, blanchedalmond, blue, blueviolet, brown, burlywood, cadetblue, chartreuse, chocolate, coral, cornflowerblue, cornsilk, crimson, cyan, darkblue, darkcyan, darkgoldenrod, darkgray, darkgreen, darkgrey, darkkhaki, darkmagenta, darkolivegreen, darkorange, darkorchid, darkred, darksalmon, darkseagreen, darkslateblue, darkslategray, darkslategrey, darkturquoise, darkviolet, deeppink, deepskyblue, dimgray, dimgrey, dodgerblue, firebrick, floralwhite, forestgreen, fuchsia, gainsboro, ghostwhite, goldenrod, gold, gray, green, greenyellow, grey, honeydew, hotpink, indianred, indigo, ivory, khaki, lavenderblush, lavender, lawngreen, lemonchiffon, lightblue, lightcoral, lightcyan, lightgoldenrodyellow, lightgray, lightgreen, lightgrey, lightpink, lightsalmon, lightseagreen, lightskyblue, lightslategray, lightslategrey, lightsteelblue, lightyellow, lime, limegreen, linen, magenta, maroon, mediumaquamarine, mediumblue, mediumorchid, mediumpurple, mediumseagreen, mediumslateblue, mediumspringgreen, mediumturquoise, mediumvioletred, midnightblue, mintcream, mistyrose, moccasin);


// $repeat, $max, $prefix: null, $sufix: null
@function multiply($arguments) {
	$max    : map-get($arguments, max);
	$repeat : map-get($arguments, repeat);
	$prefix : map-get($arguments, prefix);
	$sufix  : map-get($arguments, sufix);

	@if not map-has-key($arguments, max){$max: 1;}

	$result: $prefix;

	@for $i from 0 to $max {
		$result: $result + $repeat; //ee
	}

	@if ($sufix == 0){
		@return $result + $repeat;
	} @else{
		@return $result + $sufix;
	}

	
}

$colors: (
	black: (
		name: (prefix: b, max: 2), 
		prop: (max: 3)
	)
);

@each $title, $value in $colors{
	$name: map-get($value, name);
	$prop: map-get($value, prop);
	 
	@for $i from 1 to 9 {
		.#{multiply(map-merge($name, (repeat: $i, max: 2)))} {
			background-color: ##{multiply(map-merge($prop, (repeat: $i)))};
		}
	}
}


@each $item in (repeat: e, max: 2), (repeat: f, max: 2){
	@for $i from 0 through 9{
		.#{multiply(map-merge($item, (sufix: $i)))}{
			background-color: ##{multiply(map-merge($item, (sufix: $i)))};
		}
	}
}


// @each $nx in $colorNames {
// 	#{$nx} {background-color: #{$nx};}
// }

















































